{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chart-container\"\n};\nconst _hoisted_2 = {\n  ref: \"chartRef\",\n  class: \"w-full h-[500px] bg-white rounded-lg shadow-md\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", {\n    class: \"text-xl font-bold mb-4\"\n  }, \"客户地区分布\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["D:\\Program\\Java QP\\Erp\\erpfront\\src\\views\\CustomerArea.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <h2 class=\"text-xl font-bold mb-4\">客户地区分布</h2>\r\n    <div ref=\"chartRef\" class=\"w-full h-[500px] bg-white rounded-lg shadow-md\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport * as echarts from 'echarts';\r\nimport { ref, onMounted, onUnmounted, nextTick } from 'vue';\r\n\r\nconst chartRef = ref(null);\r\nlet myChart = null;\r\n\r\n// 获取客户地区数据\r\nconst fetchCustomerData = async () => {\r\n  try {\r\n    const response = await axios.get(\"http://localhost:8081/countCust\");\r\n    return response.data || [];\r\n  } catch (error) {\r\n    console.error('获取客户数据失败:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 初始化图表\r\nconst initChart = async () => {\r\n  if (!chartRef.value) return;\r\n  \r\n  // 销毁旧实例防止内存泄漏\r\n  if (myChart) {\r\n    myChart.dispose();\r\n  }\r\n  \r\n  // 等待DOM渲染完成\r\n  await nextTick();\r\n  \r\n  // 初始化图表\r\n  myChart = echarts.init(chartRef.value);\r\n  \r\n  // 获取数据\r\n  const data = await fetchCustomerData();\r\n  \r\n  // 图表配置\r\n  const option = {\r\n    title: {\r\n      text: '客户地区分布',\r\n      left: 'center',\r\n      textStyle: {\r\n        fontSize: 16,\r\n        fontWeight: 'normal'\r\n      }\r\n    },\r\n    tooltip: {\r\n      trigger: 'item',\r\n      formatter: '{a} <br/>{b}: {c} ({d}%)'\r\n    },\r\n    legend: {\r\n      type: 'scroll',\r\n      orient: 'vertical',\r\n      right: 10,\r\n      top: 20,\r\n      bottom: 20,\r\n    },\r\n    toolbox: {\r\n      show: true,\r\n      feature: {\r\n        dataView: { show: true, readOnly: false },\r\n        restore: { show: true },\r\n        saveAsImage: { show: true }\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: '客户数量',\r\n        type: 'pie',\r\n        radius: ['30%', '75%'],\r\n        center: ['40%', '50%'],\r\n        roseType: 'radius',\r\n        itemStyle: {\r\n          borderRadius: 5,\r\n          borderColor: '#fff',\r\n          borderWidth: 2\r\n        },\r\n        data: data.length ? data : [\r\n          { value: 0, name: '暂无数据' }\r\n        ],\r\n        label: {\r\n          formatter: '{b}: {d}%'\r\n        }\r\n      }\r\n    ]\r\n  };\r\n  \r\n  // 设置图表选项\r\n  myChart.setOption(option);\r\n  \r\n  // 监听窗口大小变化，自适应图表\r\n  window.addEventListener('resize', handleResize);\r\n};\r\n\r\n// 窗口大小变化处理\r\nconst handleResize = () => {\r\n  if (myChart) {\r\n    myChart.resize();\r\n  }\r\n};\r\n\r\nonMounted(() => {\r\n  initChart();\r\n});\r\n\r\nonUnmounted(() => {\r\n  if (myChart) {\r\n    myChart.dispose();\r\n    window.removeEventListener('resize', handleResize);\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  padding: 20px;\r\n}\r\n</style>    "],"mappings":";;EACOA,KAAK,EAAC;AAAiB;;EAErBC,GAAG,EAAC,UAAU;EAACD,KAAK,EAAC;;;uBAF5BE,mBAAA,CAGM,OAHNC,UAGM,G,0BAFJC,mBAAA,CAA8C;IAA1CJ,KAAK,EAAC;EAAwB,GAAC,QAAM,sBACzCI,mBAAA,CAAiF,OAAjFC,UAAiF,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}