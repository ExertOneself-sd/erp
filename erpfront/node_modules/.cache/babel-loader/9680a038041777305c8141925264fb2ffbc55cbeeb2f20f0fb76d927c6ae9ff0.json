{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { onMounted, reactive, ref, toRefs } from 'vue';\n\n// 树配置\n\nexport default {\n  __name: 'AddMenus',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = {\n      id: 'id',\n      label: 'label',\n      children: 'subMenus'\n    };\n\n    // 数据状态\n    const treeNodeList = ref([]);\n    const treeRef = ref(null);\n    const currentNodeId = ref(0);\n    const expandedKeys = ref([]);\n\n    // 表单数据和验证规则\n    const menuForm = reactive({\n      label: '',\n      path: '',\n      icon: '',\n      sort: 0,\n      pid: 0\n    });\n    const rules = reactive({\n      label: [{\n        required: true,\n        message: '请输入菜单名称',\n        trigger: 'blur'\n      }],\n      path: [{\n        required: true,\n        message: '请输入菜单路径',\n        trigger: 'blur'\n      }]\n    });\n\n    // 加载菜单树数据\n    function loadMenuTree() {\n      axios.get(\"http://localhost:8081/listMenus\").then(response => {\n        treeNodeList.value = response.data;\n        expandedKeys.value = [1]; // 默认展开根节点\n      }).catch(error => {\n        ElMessage.error('加载菜单树失败，请稍后重试');\n        console.log(error);\n      });\n    }\n\n    // 生命周期钩子\n    onMounted(() => {\n      loadMenuTree();\n    });\n\n    // 节点点击事件处理\n    function handleNodeClick(data) {\n      currentNodeId.value = data.id;\n      menuForm.pid = data.id;\n    }\n\n    // 提交菜单表单\n    function submitMenuForm() {\n      if (currentNodeId.value === 0) {\n        ElMessage.warning('请选择父节点');\n        return;\n      }\n\n      // 表单验证\n      if (!menuForm.label) {\n        ElMessage.warning('请输入菜单名称');\n        return;\n      }\n      if (!menuForm.path) {\n        ElMessage.warning('请输入菜单路径');\n        return;\n      }\n      axios.post(\"http://localhost:8081/saveMenus\", menuForm).then(response => {\n        if (response.data.code === 200) {\n          loadMenuTree();\n          resetForm();\n          ElMessage.success('菜单添加成功');\n        } else {\n          ElMessage.error(response.data.msg || '菜单添加失败');\n        }\n      }).catch(error => {\n        ElMessage.error('服务器错误，请稍后重试');\n        console.log(error);\n      });\n    }\n\n    // 重置表单\n    function resetForm() {\n      menuForm.label = '';\n      menuForm.path = '';\n      menuForm.icon = '';\n      menuForm.sort = 0;\n    }\n\n    // 添加子菜单\n    function append(data) {\n      currentNodeId.value = data.id;\n      menuForm.pid = data.id;\n      // 可以在这里添加自动填充表单的逻辑\n    }\n\n    // 删除菜单\n    function remove(node, data) {\n      if (node.childNodes.length > 0) {\n        ElMessage.warning('请先删除子菜单');\n        return;\n      }\n      ElMessageBox.confirm(`确定要删除菜单 ${data.label} 吗？`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        axios.post(\"http://localhost:8081/deleteMenu\", {\n          id: data.id\n        }).then(response => {\n          if (response.data.code === 200) {\n            loadMenuTree();\n            if (currentNodeId.value === data.id) {\n              currentNodeId.value = 0;\n              resetForm();\n            }\n            ElMessage.success('菜单删除成功');\n          } else {\n            ElMessage.error(response.data.msg || '菜单删除失败');\n          }\n        }).catch(error => {\n          ElMessage.error('服务器错误，请稍后重试');\n          console.log(error);\n        });\n      }).catch(() => {\n        // 取消操作\n      });\n    }\n    const __returned__ = {\n      props,\n      treeNodeList,\n      treeRef,\n      currentNodeId,\n      expandedKeys,\n      menuForm,\n      rules,\n      loadMenuTree,\n      handleNodeClick,\n      submitMenuForm,\n      resetForm,\n      append,\n      remove,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      onMounted,\n      reactive,\n      ref,\n      toRefs\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["axios","ElMessage","ElMessageBox","onMounted","reactive","ref","toRefs","props","id","label","children","treeNodeList","treeRef","currentNodeId","expandedKeys","menuForm","path","icon","sort","pid","rules","required","message","trigger","loadMenuTree","get","then","response","value","data","catch","error","console","log","handleNodeClick","submitMenuForm","warning","post","code","resetForm","success","msg","append","remove","node","childNodes","length","confirm","confirmButtonText","cancelButtonText","type"],"sources":["D:/Program/Java QP/Erp/erpfront/src/views/AddMenus.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <h2 class=\"text-xl font-bold mb-4\">添加菜单</h2>\r\n    \r\n    <div class=\"mb-6\">\r\n      <p class=\"text-gray-600 mb-2\">选择新增节点的父节点：</p>\r\n      <el-tree\r\n        :props=\"props\"\r\n        :data=\"treeNodeList\"\r\n        node-key=\"id\"\r\n        ref=\"treeRef\"\r\n        @node-click=\"handleNodeClick\"\r\n        highlight-current\r\n        :default-expanded-keys=\"expandedKeys\"\r\n      />\r\n    </div>\r\n    \r\n    <hr class=\"my-6 border-gray-200\">\r\n    \r\n    <div class=\"mb-6\">\r\n      <el-form :model=\"menuForm\" label-width=\"100px\">\r\n        <el-form-item label=\"菜单名称\" prop=\"label\">\r\n          <el-input v-model=\"menuForm.label\" placeholder=\"请输入菜单名称\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"菜单路径\" prop=\"path\">\r\n          <el-input v-model=\"menuForm.path\" placeholder=\"请输入菜单路径\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"菜单图标\" prop=\"icon\">\r\n          <el-input v-model=\"menuForm.icon\" placeholder=\"请输入菜单图标\"></el-input>\r\n        </el-form-item>\r\n        \r\n        <el-form-item label=\"排序号\" prop=\"sort\">\r\n          <el-input-number v-model=\"menuForm.sort\" :min=\"0\" placeholder=\"请输入排序号\"></el-input-number>\r\n        </el-form-item>\r\n        \r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"submitMenuForm\">提交</el-button>\r\n          <el-button @click=\"resetForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n    \r\n    <!-- 自定义树节点内容 -->\r\n    <template #default=\"{ node, data }\">\r\n      <div class=\"flex justify-between items-center\">\r\n        <span :class=\"{'text-primary': currentNodeId === data.id}\">{{ node.label }}</span>\r\n        <div class=\"flex space-x-2\">\r\n          <el-button type=\"primary\" size=\"small\" @click=\"append(data)\">\r\n            <i class=\"el-icon-plus\"></i> 添加子菜单\r\n          </el-button>\r\n          <el-button type=\"danger\" size=\"small\" @click=\"remove(node, data)\">\r\n            <i class=\"el-icon-delete\"></i> 删除\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport axios from 'axios';\r\nimport { ElMessage, ElMessageBox } from 'element-plus';\r\nimport { onMounted, reactive, ref, toRefs } from 'vue';\r\n\r\n// 树配置\r\nconst props = {\r\n  id: 'id',\r\n  label: 'label',\r\n  children: 'subMenus'\r\n}\r\n\r\n// 数据状态\r\nconst treeNodeList = ref([])\r\nconst treeRef = ref(null)\r\nconst currentNodeId = ref(0)\r\nconst expandedKeys = ref([])\r\n\r\n// 表单数据和验证规则\r\nconst menuForm = reactive({\r\n  label: '',\r\n  path: '',\r\n  icon: '',\r\n  sort: 0,\r\n  pid: 0\r\n})\r\n\r\nconst rules = reactive({\r\n  label: [\r\n    { required: true, message: '请输入菜单名称', trigger: 'blur' }\r\n  ],\r\n  path: [\r\n    { required: true, message: '请输入菜单路径', trigger: 'blur' }\r\n  ]\r\n})\r\n\r\n// 加载菜单树数据\r\nfunction loadMenuTree() {\r\n  axios.get(\"http://localhost:8081/listMenus\")\r\n    .then((response) => {\r\n      treeNodeList.value = response.data\r\n      expandedKeys.value = [1] // 默认展开根节点\r\n    })\r\n    .catch((error) => {\r\n      ElMessage.error('加载菜单树失败，请稍后重试')\r\n      console.log(error)\r\n    })\r\n}\r\n\r\n// 生命周期钩子\r\nonMounted(() => {\r\n  loadMenuTree()\r\n})\r\n\r\n// 节点点击事件处理\r\nfunction handleNodeClick(data) {\r\n  currentNodeId.value = data.id\r\n  menuForm.pid = data.id\r\n}\r\n\r\n// 提交菜单表单\r\nfunction submitMenuForm() {\r\n  if (currentNodeId.value === 0) {\r\n    ElMessage.warning('请选择父节点')\r\n    return\r\n  }\r\n  \r\n  // 表单验证\r\n  if (!menuForm.label) {\r\n    ElMessage.warning('请输入菜单名称')\r\n    return\r\n  }\r\n  \r\n  if (!menuForm.path) {\r\n    ElMessage.warning('请输入菜单路径')\r\n    return\r\n  }\r\n  \r\n  axios.post(\"http://localhost:8081/saveMenus\", menuForm)\r\n    .then((response) => {\r\n      if (response.data.code === 200) {\r\n        loadMenuTree()\r\n        resetForm()\r\n        ElMessage.success('菜单添加成功')\r\n      } else {\r\n        ElMessage.error(response.data.msg || '菜单添加失败')\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      ElMessage.error('服务器错误，请稍后重试')\r\n      console.log(error)\r\n    })\r\n}\r\n\r\n// 重置表单\r\nfunction resetForm() {\r\n  menuForm.label = ''\r\n  menuForm.path = ''\r\n  menuForm.icon = ''\r\n  menuForm.sort = 0\r\n}\r\n\r\n// 添加子菜单\r\nfunction append(data) {\r\n  currentNodeId.value = data.id\r\n  menuForm.pid = data.id\r\n  // 可以在这里添加自动填充表单的逻辑\r\n}\r\n\r\n// 删除菜单\r\nfunction remove(node, data) {\r\n  if (node.childNodes.length > 0) {\r\n    ElMessage.warning('请先删除子菜单')\r\n    return\r\n  }\r\n  \r\n  ElMessageBox.confirm(\r\n    `确定要删除菜单 ${data.label} 吗？`,\r\n    '提示',\r\n    {\r\n      confirmButtonText: '确定',\r\n      cancelButtonText: '取消',\r\n      type: 'warning'\r\n    }\r\n  ).then(() => {\r\n    axios.post(\"http://localhost:8081/deleteMenu\", { id: data.id })\r\n      .then((response) => {\r\n        if (response.data.code === 200) {\r\n          loadMenuTree()\r\n          if (currentNodeId.value === data.id) {\r\n            currentNodeId.value = 0\r\n            resetForm()\r\n          }\r\n          ElMessage.success('菜单删除成功')\r\n        } else {\r\n          ElMessage.error(response.data.msg || '菜单删除失败')\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        ElMessage.error('服务器错误，请稍后重试')\r\n        console.log(error)\r\n      })\r\n  }).catch(() => {\r\n    // 取消操作\r\n  })\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 8px;\r\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.custom-tree-node {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  width: 100%;\r\n}\r\n\r\n.el-tree-node__content {\r\n  height: 40px !important;\r\n}\r\n</style>"],"mappings":"AA8DA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,YAAY,QAAQ,cAAc;AACtD,SAASC,SAAS,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,MAAM,QAAQ,KAAK;;AAEtD;;;;;;;;IACA,MAAMC,KAAK,GAAG;MACZC,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE;IACZ,CAAC;;IAED;IACA,MAAMC,YAAY,GAAGN,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAMO,OAAO,GAAGP,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMQ,aAAa,GAAGR,GAAG,CAAC,CAAC,CAAC;IAC5B,MAAMS,YAAY,GAAGT,GAAG,CAAC,EAAE,CAAC;;IAE5B;IACA,MAAMU,QAAQ,GAAGX,QAAQ,CAAC;MACxBK,KAAK,EAAE,EAAE;MACTO,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,EAAE;MACRC,IAAI,EAAE,CAAC;MACPC,GAAG,EAAE;IACP,CAAC,CAAC;IAEF,MAAMC,KAAK,GAAGhB,QAAQ,CAAC;MACrBK,KAAK,EAAE,CACL;QAAEY,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAO,CAAC,CACxD;MACDP,IAAI,EAAE,CACJ;QAAEK,QAAQ,EAAE,IAAI;QAAEC,OAAO,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAO,CAAC;IAE3D,CAAC,CAAC;;IAEF;IACA,SAASC,YAAYA,CAAA,EAAG;MACtBxB,KAAK,CAACyB,GAAG,CAAC,iCAAiC,CAAC,CACzCC,IAAI,CAAEC,QAAQ,IAAK;QAClBhB,YAAY,CAACiB,KAAK,GAAGD,QAAQ,CAACE,IAAI;QAClCf,YAAY,CAACc,KAAK,GAAG,CAAC,CAAC,CAAC,EAAC;MAC3B,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;QAChB9B,SAAS,CAAC8B,KAAK,CAAC,eAAe,CAAC;QAChCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;IACN;;IAEA;IACA5B,SAAS,CAAC,MAAM;MACdqB,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC;;IAEF;IACA,SAASU,eAAeA,CAACL,IAAI,EAAE;MAC7BhB,aAAa,CAACe,KAAK,GAAGC,IAAI,CAACrB,EAAE;MAC7BO,QAAQ,CAACI,GAAG,GAAGU,IAAI,CAACrB,EAAE;IACxB;;IAEA;IACA,SAAS2B,cAAcA,CAAA,EAAG;MACxB,IAAItB,aAAa,CAACe,KAAK,KAAK,CAAC,EAAE;QAC7B3B,SAAS,CAACmC,OAAO,CAAC,QAAQ,CAAC;QAC3B;MACF;;MAEA;MACA,IAAI,CAACrB,QAAQ,CAACN,KAAK,EAAE;QACnBR,SAAS,CAACmC,OAAO,CAAC,SAAS,CAAC;QAC5B;MACF;MAEA,IAAI,CAACrB,QAAQ,CAACC,IAAI,EAAE;QAClBf,SAAS,CAACmC,OAAO,CAAC,SAAS,CAAC;QAC5B;MACF;MAEApC,KAAK,CAACqC,IAAI,CAAC,iCAAiC,EAAEtB,QAAQ,CAAC,CACpDW,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACE,IAAI,CAACS,IAAI,KAAK,GAAG,EAAE;UAC9Bd,YAAY,CAAC,CAAC;UACde,SAAS,CAAC,CAAC;UACXtC,SAAS,CAACuC,OAAO,CAAC,QAAQ,CAAC;QAC7B,CAAC,MAAM;UACLvC,SAAS,CAAC8B,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACY,GAAG,IAAI,QAAQ,CAAC;QAChD;MACF,CAAC,CAAC,CACDX,KAAK,CAAEC,KAAK,IAAK;QAChB9B,SAAS,CAAC8B,KAAK,CAAC,aAAa,CAAC;QAC9BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;IACN;;IAEA;IACA,SAASQ,SAASA,CAAA,EAAG;MACnBxB,QAAQ,CAACN,KAAK,GAAG,EAAE;MACnBM,QAAQ,CAACC,IAAI,GAAG,EAAE;MAClBD,QAAQ,CAACE,IAAI,GAAG,EAAE;MAClBF,QAAQ,CAACG,IAAI,GAAG,CAAC;IACnB;;IAEA;IACA,SAASwB,MAAMA,CAACb,IAAI,EAAE;MACpBhB,aAAa,CAACe,KAAK,GAAGC,IAAI,CAACrB,EAAE;MAC7BO,QAAQ,CAACI,GAAG,GAAGU,IAAI,CAACrB,EAAE;MACtB;IACF;;IAEA;IACA,SAASmC,MAAMA,CAACC,IAAI,EAAEf,IAAI,EAAE;MAC1B,IAAIe,IAAI,CAACC,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;QAC9B7C,SAAS,CAACmC,OAAO,CAAC,SAAS,CAAC;QAC5B;MACF;MAEAlC,YAAY,CAAC6C,OAAO,CAClB,WAAWlB,IAAI,CAACpB,KAAK,KAAK,EAC1B,IAAI,EACJ;QACEuC,iBAAiB,EAAE,IAAI;QACvBC,gBAAgB,EAAE,IAAI;QACtBC,IAAI,EAAE;MACR,CACF,CAAC,CAACxB,IAAI,CAAC,MAAM;QACX1B,KAAK,CAACqC,IAAI,CAAC,kCAAkC,EAAE;UAAE7B,EAAE,EAAEqB,IAAI,CAACrB;QAAG,CAAC,CAAC,CAC5DkB,IAAI,CAAEC,QAAQ,IAAK;UAClB,IAAIA,QAAQ,CAACE,IAAI,CAACS,IAAI,KAAK,GAAG,EAAE;YAC9Bd,YAAY,CAAC,CAAC;YACd,IAAIX,aAAa,CAACe,KAAK,KAAKC,IAAI,CAACrB,EAAE,EAAE;cACnCK,aAAa,CAACe,KAAK,GAAG,CAAC;cACvBW,SAAS,CAAC,CAAC;YACb;YACAtC,SAAS,CAACuC,OAAO,CAAC,QAAQ,CAAC;UAC7B,CAAC,MAAM;YACLvC,SAAS,CAAC8B,KAAK,CAACJ,QAAQ,CAACE,IAAI,CAACY,GAAG,IAAI,QAAQ,CAAC;UAChD;QACF,CAAC,CAAC,CACDX,KAAK,CAAEC,KAAK,IAAK;UAChB9B,SAAS,CAAC8B,KAAK,CAAC,aAAa,CAAC;UAC9BC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACpB,CAAC,CAAC;MACN,CAAC,CAAC,CAACD,KAAK,CAAC,MAAM;QACb;MAAA,CACD,CAAC;IACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}